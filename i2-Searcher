Searcher一共包括两个包
第一个包定义了引擎功能
第二个包定义了常用结构体

#在使用引擎之前需要初始化：
typedef struct EngineInitOptions {
	// 半角逗号分隔的字典文件
	SegmenterDictionaries string
	// 停用词文件
	StopTokenFile string

	// 索引器初始化选项
	IndexerInitOptions *IndexerInitOptions
	// 默认的搜索选项
	DefaultRankOptions *RankOptions
}

#搜索的过程分两步#
第一步是在索引表中查找包含搜索键的文档
第二步是对所有索引到的文档进行[排序]

排序的核心是对文档[评分]

[评分]规则如下:
1,首先按照关键词紧邻距离排序，比如搜索“自行车运动”，这个短语会被切分成两个关键词，“自行车”和“运动”，出现两个关键词紧邻的文章应该排在两个关键词分开的文章前面。
2,然后按照微博的发布时间大致排序，每三天为一个梯队，较晚梯队的文章排在前面。
3,BM25 * 0.5 + tf-idf * 0.5


这样的规则需要给每个文档保存一些评分数据,这些数据保存在下面的结构体中:
typedef struct {
	time_stamp  int;
	others   sometype
} metricsFields;
typedef struct ScoringCriteria{
	//using metricsFields to score
};

搜索结果保存在struct response中：
response = Searcher.Search(types.SearchRequest{
    Text: "自行车运动",
    RankOptions: &types.RankOptions{
        ScoringCriteria
				//一下两个参数用于控制输出
        OutputOffset: 0,
        MaxOutputs:   100,
    },
})

typedef struct {
	"title": string,
	"author": string,
	"timestamp":long long,
	"abstract": string,
	"url":string,
	"OutputOffset: int,  //控制分几页，默认为5
	"MaxOutputs":int   //控制最多输出几条结果，默认为100
} response;
